Question - https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/536/week-3-may-15th-may-21st/3334/

Logic - The basic approach that comes to mind is that for every new stock value that arrives, we should count the stock values less than or equal to it that appear before it. However, this is an expensive approach that will lead to TLE. Instead, if we make use of the number of stock values that are less than the previous stock value, then we can skip a few elements for each case. Consider the example 100, 80, 60, 70, 60, 75, 85

We will initialize count to 1 for each element(denoting the stock price on that day)
100 - first element - count 1
80 - check previous element, it is more than 80, so we stop - count 1
60 - check previous element, it is more than 60, so we stop - count 1
70 - check previous element, it is less than 70, so increment count with count of 60. Then we check 	 80, which is more - count 2
60 - check previous element, it is more than 60, so we stop - count 1
75 - check 60, it is less than 75, so count = 1(initial) + 1(for 60). Now, check 70, it is less than 		 75, so count = 2 + 2(for 70). Now since the count is 2, we skip 2-1 = 1 element and check 80 		 directly, skipping 60. 80 > 75, so stop - Count 4
85 - 75 < 85 - count = 1 + 4. Skip 3 elements and check 80. 80 < 85 - count = 5 + 1. Skip 0 elements 	  and check 100. 100 > 85. So stop - count 6

This way, we can smake the process more efficient.

Code - 

class StockSpanner:

    def __init__(self):
        self.stocks = []
        self.size = 0

    def next(self, price: int) -> int:
        count = 1
        index = self.size - 1
        while index >= 0:
            if self.stocks[index][0] <= price:
                count += self.stocks[index][1]
                index -= self.stocks[index][1]
            else:
                break
            
        self.stocks.append((price, count))
        self.size += 1
        return count


# Your StockSpanner object will be instantiated and called as such:
# obj = StockSpanner()
# param_1 = obj.next(price)
