Question - https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/537/week-4-may-22nd-may-28th/3339/

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def bstFromPreorder(self, preorder: List[int]) -> TreeNode:
        
        def makeSubtree(nodes):
            if len(nodes) == 0:
                return None
            leftChild = []
            rightChild = []
            for i in range(1, len(nodes)):
                if nodes[i] > nodes[0]:
                    leftChild = nodes[1:i]
                    rightChild = nodes[i:]
                    break
            if leftChild == rightChild == []:
                leftChild = nodes[1:]
            parent = TreeNode(nodes[0])
            parent.left = makeSubtree(leftChild)
            parent.right = makeSubtree(rightChild)
            return parent
        
        root = makeSubtree(preorder)
        return root
