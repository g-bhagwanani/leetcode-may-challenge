Question - https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/537/week-4-may-22nd-may-28th/3343/

from math import floor, log

class Solution:
    def countBits(self, num: int) -> List[int]:
                
        ans = [0]
        if num == 0:
            return ans
        binLen = floor(log(num, 2)) + 1
        number = [0 for _ in range(binLen)]
        count = 0
        for i in range(1, num+1):
            if number[binLen-1] == 0:
                number[binLen-1] = 1
                count += 1
            else:
                ones = 0
                for j in range(binLen-1, -1, -1):
                    if number[j] == 1:
                        number[j] = 0
                        ones += 1
                    else:
                        break
                number[j] = 1
                count -= (ones-1)
                    
            ans.append(count)
            
        return ans
